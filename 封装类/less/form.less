//-------------------------------------------------------------------------------//
// input
// 表单
.ui-form-control {
  display: block;
//  width: 100%;
  height: @input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  padding: @padding-base-vertical @padding-base-horizontal;
  font-size: @font-size-base;
  line-height: @line-height-base;
  color: @input-color;
  background-color: @input-bg;
  background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
  border: 1px solid @input-border;
  border-radius: @input-border-radius; // Note: This has no effect on <select>s in some browsers, due to the limited stylability of <select>s in CSS.
  //  .box-shadow(inset 0 1px 1px rgba(0,0,0,.075));
  //  .transition(~"border-color ease-in-out .15s, box-shadow ease-in-out .15s");
  //
  //  // Customize the `:focus` state to imitate native WebKit styles.
  //  .form-control-focus();
  //  // Placeholder
  //  .placeholder();
  // Unstyle the caret on `<select>`s in IE10+.
  &::-ms-expand {
    border: 0;
    background-color: transparent;
  }
  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &[disabled],
  &[readonly],
  fieldset[disabled] & {
    background-color: @input-bg-disabled;
    opacity: 1; // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655
  }

  &[disabled],
  fieldset[disabled] & {
    cursor: @cursor-disabled;
  }

  // Reset height for `textarea`s
  textarea& {
    height: auto;
  }
}

.ui-form-inline {
  // Kick in the inline
  //  @media (min-width: @screen-sm-min) {
  // Inline-block all the things for "inline"
  .ui-form-group {
    display: inline-block;
    margin-bottom: 0;
    vertical-align: middle;
  }

  // In navbar-form, allow folks to *not* use `.form-group`
  .ui-form-control {
    display: inline-block;
    width: auto; // Prevent labels from stacking above inputs in `.form-group`
    vertical-align: middle;
  }

  // Make static controls behave like regular ones
  .ui-form-control-static {
    display: inline-block;
  }

  .ui-input-group {
    display: inline-table;
    vertical-align: middle;

    .input-group-addon,
    .input-group-btn,
    .form-control {
      width: auto;
    }
  }

  // Input groups need that 100% width though
  .ui-input-group > .ui-form-control {
//    width: 100%;
  }

  .control-label {
    margin-bottom: 0;
    vertical-align: middle;
  }

  // Remove default margin on radios/checkboxes that were used for stacking, and
  // then undo the floating of radios and checkboxes to match.
  .ui-radio,
  .ui-checkbox {
    display: inline-block;
    margin-top: 0;
    margin-bottom: 0;
    vertical-align: middle;

    label {
      padding-left: 0;
    }
  }
  .ui-radio input[type="radio"],
  .ui-checkbox input[type="checkbox"] {
    position: relative;
    margin-left: 0;
  }
  // Re-override the feedback icon.
  .ui-has-feedback .form-control-feedback {
    top: 0;
  }
  //  }
}




